#!/bin/bash

# TODO check jq, docker and gcc versions

# get name of container
CONTAINER_NAME=""
while test $# -gt 0; do
  case "$1" in
    --name)
      shift
      if test $# -gt 0; then
        export CONTAINER_NAME=$1
      else
        echo "no container name specified"
        exit 1
      fi
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [ -z $CONTAINER_NAME ] ; then
  echo "expecting --name flag"
  exit 1
fi

jq --version
if [ $? -ne 0 ] ; then
  echo "Unable to invoke jq"
  exit 1
fi

cwd=$PWD

# attempt to install mica if it doesn't exist
if [ ! -d `pwd`/pin/source/tools/mica ] ; then
  echo "Unable to find mica folder. Will attempt to install it now."

  docker run --rm -v `pwd`:/mnt ivotron/mica

  if [ ! -d `pwd`/pin/source/tools/mica ] ; then
    echo "Unable to install mica."
    exit 1
  fi

  cd pin/source/tools/mica
  cp mica.conf.example mica.conf
  sed -i -e 's/ilp_one/all/' mica.conf
fi

cd $cwd

# check dependencies are available in the container
for cmd in "gcc g++ make" ; do
  docker run --rm --entrypoint=/bin/bash $@ $cmd -v &> /dev/null
  if [ $? -ne 0 ] ; then
    echo "Unable to find $cmd in given container"
    exit 1
  fi

# get the entrypoint of the container
ep=`docker inspect $image | jq ' .[] | .ContainerConfig.Entrypoint[] '`
if [ $? -ne 0 ] ; then
  echo "Unable to inspect $image ENTRYPOINT"
  exit 1
fi

# get the working directory
wd=`docker inspect $image | jq ' .[] | .ContainerConfig.WorkingDir '`
if [ $? -ne 0 ] ; then
  echo "Unable to inspect $image for WORKDIR"
  exit 1
fi

docker run --rm \
  -v `pwd`/entrypoint_for_profiling.sh:/root/entrypoint_for_profiling.sh \
  -v `pwd`/pin:/pin \
  -e ORIGINAL_ENTRYPOINT=$ep \
  -e ORIGINAL_WORKDIR=$wd
  --entrypoint=/root/entrypoint_for_profiling.sh \
  $@

if [ ! -f output.csv ] ; then
  csvheader="container,"
  csvheader="instruction_cnt,"
  csvheader+="ilp_cycle_count_win_size_32,"
  csvheader+="ilp_cycle_count_win_size_64,"
  csvheader+="ilp_cycle_count_win_size_128,"
  csvheader+="ilp_cycle_count_win_size_256,"
  csvheader+="itypes_instruction_cnt,"
  csvheader+="itypes_mem_read_cnt,"
  csvheader+="itypes_mem_write_cnt,"
  csvheader+="itypes_control_cnt,"
  csvheader+="itypes_arith_cnt,"
  csvheader+="itypes_fp_cnt,"
  csvheader+="itypes_stack_cnt,"
  csvheader+="itypes_shift_cnt,"
  csvheader+="itypes_string_cnt,"
  csvheader+="itypes_sse_cnt,"
  csvheader+="itypes_system_cnt,"
  csvheader+="itypes_nop_cnt,"
  csvheader+="itypes_other_cnt,"
  csvheader+="ppm_instruction_cnt,"
  csvheader+="ppm_GAg_mispred_cnt_4bits,"
  csvheader+="ppm_PAg_mispred_cnt_4bits,"
  csvheader+="ppm_GAs_mispred_cnt_4bits,"
  csvheader+="ppm_PAs_mispred_cnt_4bits,"
  csvheader+="ppm_GAg_mispred_cnt_8bits,"
  csvheader+="ppm_PAg_mispred_cnt_8bits,"
  csvheader+="ppm_GAs_mispred_cnt_8bits,"
  csvheader+="ppm_PAs_mispred_cnt_8bits,"
  csvheader+="ppm_GAg_mispred_cnt_12bits,"
  csvheader+="ppm_PAg_mispred_cnt_12bits,"
  csvheader+="ppm_GAs_mispred_cnt_12bits,"
  csvheader+="ppm_PAs_mispred_cnt_12bits,"
  csvheader+="reg_total_reg_use_cnt,"
  csvheader+="reg_total_reg_age,"
  csvheader+="reg_reg_age_cnt_1,"
  csvheader+="reg_reg_age_cnt_2,"
  csvheader+="reg_reg_age_cnt_4,"
  csvheader+="reg_reg_age_cnt_8,"
  csvheader+="reg_reg_age_cnt_16,"
  csvheader+="reg_reg_age_cnt_32,"
  csvheader+="reg_reg_age_cnt_64,"
  csvheader+="stride_mem_read_cnt,"
  csvheader+="stride_mem_read_local_stride_0,"
  csvheader+="stride_mem_read_local_stride_8,"
  csvheader+="stride_mem_read_local_stride_64,"
  csvheader+="stride_mem_read_local_stride_512,"
  csvheader+="stride_mem_read_local_stride_4096,"
  csvheader+="stride_mem_read_local_stride_32768,"
  csvheader+="stride_mem_read_local_stride_262144,"
  csvheader+="stride_mem_read_global_stride_0,"
  csvheader+="stride_mem_read_global_stride_8,"
  csvheader+="stride_mem_read_global_stride_64,"
  csvheader+="stride_mem_read_global_stride_512,"
  csvheader+="stride_mem_read_global_stride_4096,"
  csvheader+="stride_mem_read_global_stride_32768,"
  csvheader+="stride_mem_read_global_stride_262144,"
  csvheader+="stride_mem_write_cnt,"
  csvheader+="stride_mem_write_local_stride_0,"
  csvheader+="stride_mem_write_local_stride_8,"
  csvheader+="stride_mem_write_local_stride_64,"
  csvheader+="stride_mem_write_local_stride_512,"
  csvheader+="stride_mem_write_local_stride_4096,"
  csvheader+="stride_mem_write_local_stride_32768,"
  csvheader+="stride_mem_write_local_stride_262144,"
  csvheader+="stride_mem_write_global_stride_0,"
  csvheader+="stride_mem_write_global_stride_8,"
  csvheader+="stride_mem_write_global_stride_64,"
  csvheader+="stride_mem_write_global_stride_512,"
  csvheader+="stride_mem_write_global_stride_4096,"
  csvheader+="stride_mem_write_global_stride_32768,"
  csvheader+="stride_mem_write_global_stride_262144,"
  csvheader+="memfootprint_num_64-byte_blocks_data,"
  csvheader+="memfootprint_num_4KB_pages_data,"
  csvheader+="memfootprint_num_64-byte_blocks_instr,"
  csvheader+="memfootprint_num_4KB_pages_instr,"
  csvheader+="memstackdist_mem_access_cnt,"
  csvheader+="memstackdist_cold_ref_cnt,"
  csvheader+="memstackdist_acc_cnt_2^0-2^1,"
  csvheader+="memstackdist_acc_cnt_2^1-2^2,"
  csvheader+="memstackdist_acc_cnt_2^2-2^3,"
  csvheader+="memstackdist_acc_cnt_2^3-2^4,"
  csvheader+="memstackdist_acc_cnt_2^4-2^5,"
  csvheader+="memstackdist_acc_cnt_2^5-2^6,"
  csvheader+="memstackdist_acc_cnt_2^6-2^7,"
  csvheader+="memstackdist_acc_cnt_2^7-2^8,"
  csvheader+="memstackdist_acc_cnt_2^8-2^9,"
  csvheader+="memstackdist_acc_cnt_2^9-2^10,"
  csvheader+="memstackdist_acc_cnt_2^10-2^11,"
  csvheader+="memstackdist_acc_cnt_2^11-2^12,"
  csvheader+="memstackdist_acc_cnt_2^12-2^13,"
  csvheader+="memstackdist_acc_cnt_2^13-2^14,"
  csvheader+="memstackdist_acc_cnt_2^14-2^15,"
  csvheader+="memstackdist_acc_cnt_2^15-2^16,"
  csvheader+="memstackdist_acc_cnt_2^16-2^17,"
  csvheader+="memstackdist_acc_cnt_2^17-2^18,"
  csvheader+="memstackdist_acc_cnt_over_2^18"
  echo $csvheader > output.csv
fi

printf $CONTAINER_NAME >> output.csv

# check that there's only one file for each type of analysis
for atype in "ilp itypes ppm reg stride memfootprint memreusedist" ; do
  numfiles=`ls pin/source/tools/mica/${atype}_full_int_*.out | wc -l`
  if [ $numfiles -ne 1 ] ; then
    echo "expecting 1 file for ilp"
  fi

  line=$(head -n 1 ilp_full_int_*.out)
  line=`echo $line | sed 's/ /,/g'`

  printf "$line" >> output.csv
done

printf "\n" >> output.csv
