#!/bin/bash
#
# This wraps docker so that we can limit memory bandwidth with memguard. The 
# script takes 1 argument, the memory bandwidth limit, plus any other argument 
# passed to docker run. For example:
#
#   docker-run-wrapper 1000 --cpuset-cpus=0 --rm some/image --img-arguments
#
# The above instantiates a container for some/image with 1000 MB/s of memory 
# bandwidth on CPU core 0.
#
# Prerequisites:
#  - linux-headers for `uname -r` (i.e. the version of the host kernel)
#
# WARNING: when the memguard module is loaded, the entire host observes its 
# effects. For this reason, we only modify the bandwidth for the first core of 
# the host.
#
# NOTE: if running this script within a container, the following must be passed 
# to 'docker run' invocation corresponding to the container that executes 
# containers (see 
# https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/):
#
#   * --privileged
#   * -v /sys/kernel/debug:/sys/kernel/debug
#   * -v /usr/src:/usr/src
#   * -v /lib/modules:/lib/modules
#   * -v `which docker`:/usr/bin/docker
#   * --net=host
#   * -e DOCKER_HOST=$DOCKER_HOST
#
# The last two might be replaced by:
#
#   * -v /var/run/docker.sock:/var/run/docker.sock
#
# if the daemon is not exposed via tcp.

# check that first argument is numeric
re='^[0-9]+$'
if ! [[ $1 =~ $re ]] ; then
  echo "ERROR: $1 not a number" >&2
  exit 1
fi

# unload memguard (if previously loaded)
rmmod memguard

# build and load module
if [ -z "$MEMGUARD_PATH" ] ; then
  MEMGUARD_PATH="/memguard"
fi
cd $MEMGUARD_PATH
make
if [ $? -ne 0 ] ; then
  exit 1
fi
insmod $MEMGUARD_PATH/memguard.ko
if [ $? -ne 0 ] ; then
  exit 1
fi

# set bandwidth limit for core 0
echo mb $1 > /sys/kernel/debug/memguard/limit

# skip the first argument
args=""
for i in "${@:2}"; do
  args+=$i
done

# execute docker
docker run $args
if [ $? -ne 0 ] ; then
  exit 1
fi

# unload memguard (if previously loaded)
rmmod memguard

exit 0
