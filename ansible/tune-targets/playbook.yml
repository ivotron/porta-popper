---
- hosts: all
  tasks:

# check preconditions
  - name: check if docker is statically linked
    command: ldd /usr/bin/docker
    register: docker_ldd
    ignore_errors: true

  - name: ensure docker-engine is installed
    package:
      name: '{{ item }}'
      state: present
    become: true
    with_items:
    - docker-engine
    - curl
    when: '"not a dynamic executable" not in docker_ldd.stdout'

  - name: stop the docker daemon
    service:
      name: docker
      state: stopped
    become: true
    when: '"not a dynamic executable" not in docker_ldd.stdout'

  - name: get statically linked docker tarball
    command: curl -O https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz chdir=/tmp
    when: '"not a dynamic executable" not in docker_ldd.stdout'

  - name: untar statically linked docker
    command: tar xfz docker-latest.tgz chdir=/tmp
    when: '"not a dynamic executable" not in docker_ldd.stdout'

  - name: install statically linked docker
    shell: cp /tmp/docker/* /usr/bin/
    become: true
    when: '"not a dynamic executable" not in docker_ldd.stdout'

  - name: start the docker daemon
    service:
      name: docker
      state: started
    become: true

  - name: check if base.json file exists locally
    local_action:
      module: stat
      path: base.json
    run_once: true
    register: basefile
    failed_when: not basefile.stat.exists

  - name: create result parameters folder if it don't exist
    file:
      path: ./parameters
      state: directory
      mode: 0755

  - name: create facts folder if it don't exist
    file:
      path: ./facts
      state: directory
      mode: 0755

# tune targets
  - name: pull torpor image
    shell: docker pull ivotron/torpor

  - name: download torpor script
    get_url:
      url: https://raw.githubusercontent.com/ivotron/torpor/master/torpor
      dest: ./torpor
      mode: 0755

  - name: push base.json to targets
    copy:
      src: ./base.json
      dest: ./base.json
      mode: 0644

  - name: tune system
    shell: ./torpor {{ torpor_flags }}

  - name: fetch parameter files
    fetch:
      src: ./parameters.json
      dest: ./parameters/{{inventory_hostname}}.json
      flat: true

  - name: fetch torpor log
    fetch:
      src: ./torpor.log
      dest: ./parameters/{{inventory_hostname}}_torpor.log
      flat: yes

# store facts
  - name: store facts about remotes
    local_action:
      module: copy
      content: '{{ hostvars[item] | to_nice_json }}'
      dest: ./facts/{{ item }}.json
    run_once: true
    with_items: '{{ groups.all }}'
    when: '{{ item != "localhost" }}'
