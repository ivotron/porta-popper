- hosts: all
  vars:
    install_docker: no
    skip_tuning: no
    skip_tests_on_base: no
  pre_tasks:
  - name: Assert preconditions
    assert:
      that:
      - "ansible_distribution == 'Ubuntu'"
      - "ansible_lsb.major_release|int >= 12"
      - "('3.13' in ansible_kernel or '3.19' in ansible_kernel)"
      - "'base' in groups"
      - "'targets' in groups"
      - "groups.base|length == 1"
      - "groups.targets|length > 0"
      - "benchmarks is defined"

  roles:
  - role: angstwad.docker_ubuntu
    when:
    - install_docker|bool

  tasks:
  - name: install linux linux-headers
    apt: name=linux-headers-{{ ansible_kernel }}
  - name: install jq
    apt: name=jq state=present
  - name: create temp folder
    file: path=/tmp/porta state=directory mode=0755
  - name: create test folder inside porta
    file: path=/tmp/porta/tests state=directory mode=0755
  - name: send porta
    copy: src=porta dest=/tmp/porta/porta mode=0755
  - name: pull porta image
    command: docker pull ivotron/porta
  - name: pull microbench image
    command: docker pull ivotron/microbench

# get the base metrics
  - name: check if base.json file exists locally
    local_action: stat path="base.json"
    sudo: false
    register: base_metrics
    when: inventory_hostname in groups.base
  - name: generate base.json
    command: ./porta base chdir=/tmp/porta
    when:
    - inventory_hostname in groups.base
    - not base_metrics.stat.exists
  - name: get base.json metrics for host in base group
    fetch: src=/tmp/porta/base.json dest=. flat=yes
    when:
    - inventory_hostname in groups.base
    - not base_metrics.stat.exists

# tune targets
  - name: push base.json to targets
    copy: src=base.json dest=/tmp/porta/base.json mode=0644
    when:
    - not skip_tuning|bool
    - inventory_hostname in groups.targets
  - name: tune system
    command: ./porta tune chdir=/tmp/porta
    when:
    - not skip_tuning|bool
    - inventory_hostname in groups.targets
  - name: fetch parameter files to introspect
    fetch: src=/tmp/porta/parameters.json dest=parameters/{{ inventory_hostname }}.json flat=yes
    when:
    - not skip_tuning|bool
    - inventory_hostname in groups.targets

# execute test benchmarks
  - name: pull benchmark images
    command: docker pull {{ item }}
    with_items: benchmarks
  - name: execute testing benchmarks without limits
    shell: docker run --rm --memory=4G --memory-swap=4G --cpuset-cpus=0 {{ item }} > tests/{{ item.replace('/','_') }}_without_limits.json chdir=/tmp/porta
    with_items: benchmarks
    when:
    - inventory_hostname in groups.targets or (inventory_hostname in groups.base and not skip_tests_on_base|bool)
  - name: execute testing benchmarks with limits
    shell: ./porta run --rm --memory=4G --memory-swap=4G --cpuset-cpus=0 {{ item }} > tests/{{ item.replace('/','_') }}_with_limits.json chdir=/tmp/porta
    with_items: benchmarks
    when:
    - inventory_hostname in groups.targets
  - name: merge outputs without limits
    shell: jq -s add /tmp/porta/tests/*_without_limits.json > /tmp/porta/tests_without_limits.json
  - name: merge outputs with limits
    shell: jq -s add /tmp/porta/tests/*_with_limits.json > /tmp/porta/tests_with_limits.json
    when:
    - inventory_hostname in groups.targets
  - name: fetch without limits results
    fetch: src=/tmp/porta/tests_without_limits.json dest=tests/{{ inventory_hostname }}_without_limits.json flat=yes
  - name: fetch with limits results
    fetch: src=/tmp/porta/tests_with_limits.json dest=tests/{{ inventory_hostname }}_with_limits.json flat=yes
  - name: merge results
    local_action: command ./merge_results
    sudo: false
